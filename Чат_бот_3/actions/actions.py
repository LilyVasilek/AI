import requests
import datetime
import spacy
import pymorphy2
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk import FormValidationAction
from rasa_sdk.events import SlotSet
from transformers import pipeline
from pymorphy2 import MorphAnalyzer
import re
import ast
from typing import Any, Text, Dict, List

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLP-–º–æ–¥–µ–ª–µ–π
nlp = spacy.load("ru_core_news_md")
morph = MorphAnalyzer()
sentiment_analyzer = pipeline("sentiment-analysis", model="blanchefort/rubert-base-cased-sentiment")

class ActionTellTime(Action):
    def name(self) -> Text:
        return "action_tell_time"

    def run(self, dispatcher: CollectingDispatcher, 
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
            
        time_format = domain.get("config", {}).get("time_format", "%H:%M")
        now = datetime.datetime.now().strftime(time_format)
        message = f"–°–µ–π—á–∞—Å {now}"
        dispatcher.utter_message(text=message)
        return [SlotSet("last_bot_message", message)]

class ActionTellDate(Action):
    def name(self) -> Text:
        return "action_tell_date"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        date_format = "%d.%m.%Y" if lang == "ru" else "%Y-%m-%d"
        date = datetime.datetime.now().strftime(date_format)
        message = f"–°–µ–≥–æ–¥–Ω—è {date}"
        dispatcher.utter_message(text=message)
        return [SlotSet("last_bot_message", message)]

class ActionTellDay(Action):
    def name(self) -> Text:
        return "action_tell_day"
    
    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        day = datetime.datetime.now().strftime("%A")
        
        days_translation = {
            "ru": {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            },
            "en": {
                "Monday": "Monday",
                "Tuesday": "Tuesday",
                "Wednesday": "Wednesday",
                "Thursday": "Thursday",
                "Friday": "Friday",
                "Saturday": "Saturday",
                "Sunday": "Sunday"
            }
        }
        
        day_localized = days_translation.get(lang, {}).get(day, day)
        message = f"–°–µ–≥–æ–¥–Ω—è {day_localized}"
        dispatcher.utter_message(text=message)
        return [SlotSet("last_bot_message", message)]

class ActionGetWeather(Action):
    def name(self) -> Text:
        return "action_get_weather"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        city = tracker.get_slot("city")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not city:
            text = tracker.latest_message.get("text")
            doc = nlp(text)
            city = next((ent.text for ent in doc.ents if ent.label_ == "GPE"), None)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if city:
            parsed_city = morph.parse(city)[0]
            city_norm = parsed_city.normal_form
        else:
            city_norm = None

        if not city_norm:
            dispatcher.utter_message(response="utter_ask_city")
            return []

        # –ó–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
        api_key = "22b6c1843b73184829f5eec1bb60c502"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city_norm}&appid={api_key}&units=metric&lang={lang}"
        
        try:
            response = requests.get(url)
            data = response.json()
            if data.get("cod") == 200:
                temp = data["main"]["temp"]
                desc = data["weather"][0]["description"]
                message = f"–í –≥–æ—Ä–æ–¥–µ {city_norm} —Å–µ–π—á–∞—Å {desc}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C." if lang == "ru" else f"In {city_norm}: {desc}, {temp}¬∞C."
            else:
                message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è {city_norm}." if lang == "ru" else f"Weather for {city_norm} not found."
        except Exception as e:
            message = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}" if lang == "ru" else f"Weather error: {str(e)}"
        
        dispatcher.utter_message(text=message)
        return [SlotSet("city", city_norm), SlotSet("last_bot_message", message)]
    
        
class ActionRememberName(Action):
    def name(self) -> Text:
        return "action_remember_name"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        text = tracker.latest_message.get("text")
        doc = nlp(text)
        name = next((ent.text for ent in doc.ents if ent.label_ == "PER"), None)

        if not name:
            dispatcher.utter_message(response="utter_ask_name")
            return []

        message = f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!" if lang == "ru" else f"Nice to meet you, {name}!"
        dispatcher.utter_message(text=message)
        return [SlotSet("name", name), SlotSet("last_bot_message", message)]

class ActionGetName(Action):
    def name(self) -> Text:
        return "action_get_name"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        name = tracker.get_slot("name")
        
        if name:
            message = f"–¢–µ–±—è –∑–æ–≤—É—Ç {name}, –≤–µ—Ä–Ω–æ?" if lang == "ru" else f"Your name is {name}, right?"
        else:
            message = "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç." if lang == "ru" else "I don't know your name yet."
            
        dispatcher.utter_message(text=message)
        return [SlotSet("last_bot_message", message)]

class ActionAnalyzeMood(Action):
    def name(self) -> Text:
        return "action_analyze_mood"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        text = tracker.latest_message.get("text")
        
        mood_keywords = ["–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–∫–∞–∫ —Ç—ã", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º"] if lang == "ru" else ["mood", "how are you"]
        
        if not any(keyword in text.lower() for keyword in mood_keywords):
            return []
            
        result = sentiment_analyzer(text)[0]
        mood = result['label']
        score = round(result['score'], 2)
        
        if lang == "ru":
            if mood == "POSITIVE":
                msg = f"–¢—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score})"
            elif mood == "NEGATIVE":
                msg = f"–ü–æ—Ö–æ–∂–µ, —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ. üòî (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score})"
            else:
                msg = f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ. ü§î (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score})"
        else:
            if mood == "POSITIVE":
                msg = f"You're in a good mood! üòä (confidence: {score})"
            elif mood == "NEGATIVE":
                msg = f"Seems like you're sad. üòî (confidence: {score})"
            else:
                msg = f"Neutral mood. ü§î (confidence: {score})"
            
        dispatcher.utter_message(text=msg)
        return [SlotSet("last_bot_message", msg)]

class ActionTalkSupport(Action):
    def name(self) -> Text:
        return "action_talk_support"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        user_name = tracker.get_slot("name") or ("–¥—Ä—É–≥" if lang == "ru" else "friend")
        
        message = (
            f"{user_name}, —è –≤–∞—Å —Å–ª—É—à–∞—é. –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?" 
            if lang == "ru" 
            else f"{user_name}, I'm here to help. What happened?"
        )
        
        dispatcher.utter_message(text=message)
        return [SlotSet("last_bot_message", message)]

class ActionSearchWeb(Action):
    def name(self) -> Text:
        return "action_search_web"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç
        query = tracker.get_slot("query")

        # –ï—Å–ª–∏ —Å–ª–æ—Ç –ø—É—Å—Ç–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if not query:
            query = tracker.latest_message.get("text")
            if not query:
                msg = "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?" if lang == "ru" else "What exactly do you want to search for?"
                dispatcher.utter_message(text=msg)
                return [SlotSet("last_bot_message", msg)]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google
        search_url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
        message = f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª: {search_url}" if lang == "ru" else f"Here's what I found: {search_url}"
        
        dispatcher.utter_message(text=message)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ—Ç query —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
        return [SlotSet("query", query), SlotSet("last_bot_message", message)]


class ActionCalculate(Action):
    def name(self) -> Text:
        return "action_calculate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        text = tracker.latest_message.get("text")
        expression = re.findall(r"[0-9+\-*/().]+", text)
        
        if expression:
            try:
                result = self.safe_eval(expression[0])
                message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}" if lang == "ru" else f"Result: {result}"
            except Exception as e:
                message = "–ù–µ –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ." if lang == "ru" else "Can't calculate. Please check the expression."
        else:
            message = "–Ø –Ω–µ –Ω–∞—à—ë–ª –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞." if lang == "ru" else "No expression found to calculate."
            
        dispatcher.utter_message(text=message)
        return [SlotSet("last_bot_message", message)]

    def safe_eval(self, expression: Text) -> float:
        parsed = ast.parse(expression, mode='eval')
        allowed_nodes = (ast.Expression, ast.Constant, ast.BinOp, ast.UnaryOp, ast.Add, ast.Sub, ast.Mult, ast.Div)
        
        for node in ast.walk(parsed):
            if not isinstance(node, allowed_nodes):
                raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
                
        return eval(expression)

class ActionRepeatPhrase(Action):
    def name(self) -> Text:
        return "action_repeat_phrase"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        lang = domain.get("config", {}).get("language", "ru")
        phrase = next(tracker.get_latest_entity_values("repeat_phrase"), None)
        
        if phrase:
            dispatcher.utter_message(text=phrase)
            return [SlotSet("last_bot_message", phrase)]
        
        error_msg = "–ú–Ω–µ –Ω–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å." if lang == "ru" else "Nothing to repeat."
        dispatcher.utter_message(text=error_msg)
        return [SlotSet("last_bot_message", error_msg)]