import time
import re
import random
import locale
from datetime import datetime
import requests
import webbrowser

locale.setlocale(locale.LC_ALL, "ru_RU.UTF-8")

current_time = time.strftime("%H:%M:%S")
current_day = datetime.today().strftime("%A")
current_date = datetime.today().strftime("%d.%m.%Y")

API_KEY = "22b6c1843b73184829f5eec1bb60c502"  

answers = {
    r"привет": [
        "Привет! Чем могу помочь?",
        "Здравствуй! Как я могу помочь?",
        "Привет, чем могу быть полезен?",
        "Привет! Как настроение?"
    ],
    r"здравствуй": [
        "Здравствуйте! Как могу помочь?",
        "Приветствую! Чем могу помочь?",
        "Здравствуй! Чем могу быть полезен?",
        "Здравствуйте! Чем могу помочь вам сегодня?"
    ],
    r"как тебя зовут\??": [
        "Меня зовут Бот-Помощник!",
        "Я Бот-Помощник, рад помочь!",
        "Я просто Бот, но ты можешь звать меня Бот-Помощник.",
        "Я — Бот-Помощник, как тебе помочь?"
    ],
    r"что ты умеешь\??": [
        "Я могу отвечать на вопросы о времени, дате, выполнять простые вычисления, искать информацию в интернете и даже рассказывать анекдоты!",
        "Мои возможности ограничены, но я могу помочь с простыми задачами, такими как поиск информации, вычисления и ответы на вопросы.",
        "Я могу многое! Например, искать информацию, говорить о времени, выполнять вычисления и даже шутить!",
        "Я могу помочь с разными задачами, например, решить пример или узнать погоду!"
    ],
    r"сколько времени\??": [
        f"Сейчас {current_time}.",
        f"Текущее время: {current_time}.",
        f"Время сейчас: {current_time}.",
        f"Сейчас {current_time}. Самое время пойти покушать!"
    ],
    r"какой сегодня день\??": [
        f"Сегодня {current_day}.",
        f"Сегодня {current_day}, отличный день!",
        f"Сегодня {current_day}, день для новых возможностей!",
        f"Сегодня {current_day}, идеальный день для продуктивной работы!"
    ],
    r"какое сегодня число\??": [
        f"Сегодня {current_date}.",
        f"Сегодня {current_date}, надеюсь, день будет хорошим!",
        f"Сегодня {current_date}, и я уверен, что он будет классным!",
        ],
    r"какая сегодня дата\??": [
        f"Сегодня {current_date}.",
        f"Сегодня {current_date}, не забудь запланировать важные дела!",
        f"Сегодня {current_date}, отличный момент для того, чтобы сделать что-то полезное!",
        f"Сегодня {current_date}, давай сделаем этот день незабываемым!"
    ],
    r"как дела\??": [
        "Все отлично, спасибо за вопрос! А у тебя как?",
        "Неплохо, а у тебя?",
        "Я просто программа, но чувствую себя отлично!",
        "Все хорошо, готов помочь тебе с чем угодно!"
    ],
    r"как настроение\??": [
        "Мое настроение всегда на высоте! Спасибо, что спросил!",
        "Я просто программа, но я всегда рад помочь и чувствую себя отлично!",
        "Мое настроение — отличное, всегда готов помочь!",
        "Настроение на высоте! Чем могу помочь?"
    ],
    r"расскажи анекдот": [
        "Что говорит голубь, когда вводит не ту ссылку в гугле? 'Неправильный урл'.",
        "Как программисты решают проблемы? Они их компилируют.",
    ],
    r"спасибо": [
        "Рад помочь!",
        "Пожалуйста, всегда рад помочь!",
        "Обращайся, если нужно будет еще что-то!",
        "Не за что! Если возникнут вопросы, я тут!"
    ],
    r"какая погода\??": [
        "Давайте узнаем, какая погода! Введите название города.",
        "Уточните город, и я подскажу, какая погода.",
        "Напишите город, и я скажу, какая там погода!",
        "Какая погода? Напиши город, и я расскажу!"
    ],
    r"(круто|отлично|хорошо|прекрасно|замечательно|великолепно)": [
        "Рад слышать!",
        "Это здорово! Давай что-нибудь сделаем вместе!",
        "Отлично! Что ты хочешь узнать?",
        "Здорово, рад за тебя!"
    ],
    r"как ты\??": [
        "Я просто программа, но мне всегда хорошо!",
        "Я отлично, спасибо за вопрос!"
    ],
    r"что нового\??": [
        "Я всегда готов помочь, ничего нового, все по-прежнему!",
        "Не знаю, что нового, но готов отвечать на любые вопросы!"
    ],
    r"ты что умеешь\??": [
        "Я могу ответить на вопросы, помочь с вычислениями и даже пошутить!",
        "Мои возможности ограничены, но я могу помочь с простыми задачами."
    ],
    r"какая твоя цель\??": [
        "Моя цель — помогать тебе с вопросами и задачами, а также развлекать!",
        "Моя цель — помогать людям и делать их день немножко проще!"
    ],
    r"сколько будет [\d]+ [плюс|минус|умножить|разделить] [\d]+": [
    "Давайте посчитаем!",
    "Сейчас проверим!"
    ],
    r"ты любишь программировать\??": [
        "Мне нравится выполнять задачи, даже если я просто программа!",
        "Я создан для того, чтобы помогать, и программирование — это моя работа.",
        "Программирование — это то, что я умею лучше всего!"
    ],
    r"что ты думаешь о людях\??": [
        "Люди — удивительные создания! Я всегда рад помогать.",
        "Я думаю, что люди — самые умные существа на планете. Я горжусь тем, что могу быть полезным!",
        "Люди творят чудеса, и я рад, что могу помочь хотя бы немного."
    ]
}

def get_weather(city):
    city = city.replace(" ", "+")
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    response = requests.get(url)

    
    if response.status_code == 200:
        data = response.json()
        temp = data["main"]["temp"]
        weather_desc = data["weather"][0]["description"]
        return f"В городе {city.replace('+', ' ')} сейчас {weather_desc} при температуре {temp}°C."
    else:
        print(f"Ошибка при запросе: {response.text}") 
        return "Не удалось получить информацию о погоде. Попробуйте другой город."


def search_web(query):
    url = f"https://www.google.com/search?q={query.replace(' ', '+')}"
    webbrowser.open(url)

def evaluate(expression):
    try:
        expression = re.sub(r"\s+", "", expression)
        if not re.fullmatch(r"\d+[\+\-\*/]\d+", expression):
            return "Ошибка: некорректное выражение"
        return str(eval(expression))
    except ZeroDivisionError:
        return "Ошибка: деление на ноль невозможно"
    except Exception:
        return "Ошибка в вычислении"

def get_response(message):
    message = message.lower().strip()

    for pattern, reply in answers.items():
        if re.search(pattern, message):
            if isinstance(reply, list):
                return random.choice(reply)
            return reply

    match = re.search(r"(?:вычисли|посчитай)\s*([\d+\-*/ ]+)", message)
    if match:
        return evaluate(match.group(1))

    match_weather = re.search(r"погода (.+)", message, re.IGNORECASE)
    if match_weather:
        return get_weather(match_weather.group(1))

    match_search = re.search(r"поиск\s+(.+)", message, re.IGNORECASE)
    if match_search:
        search_web(match_search.group(1))
        return "Открываю результаты поиска в браузере..."

    if re.fullmatch(r"[\d+\-*/ ]+", message):
        return evaluate(message)

    return random.choice(["Не понял, попробуйте иначе.", "Повторите вопрос, пожалуйста."])

def log_conversation(user_message, bot_message):
    with open("chat.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"Вы: {user_message}\n")
        log_file.write(f"Бот: {bot_message}\n")

def start_conversation():
    with open("chat.txt", "w", encoding="utf-8") as log_file:
        log_file.write("Новый разговор начался:\n\n")
    
    print("Введите 'стоп' для выхода.")
    while True:
        user_input = input("Вы: ")
        if user_input.lower() == "стоп":
            bot_response = random.choice(["До свидания!", "Всего доброго!"])
            print("Бот:", bot_response)
            log_conversation(user_input, bot_response)
            break
        bot_response = get_response(user_input)
        print("Бот:", bot_response)
        log_conversation(user_input, bot_response)

if __name__ == "__main__":
    start_conversation()
